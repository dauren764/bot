import asyncio
import logging
import random
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup
from aiogram.filters import Command
import requests
logging.basicConfig(level=logging.INFO) 

TOKEN = ""
API_KEY = ""

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode='HTML'))
dp = Dispatcher() 

@dp.message(Command("start"))
async def bot_start(message: Message): 
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!"
                         f" –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É! "
                         f"\n\n–ù–∞–ø–∏—à–∏ /help –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ!")

@dp.message(Command("help"))
async def bot_help(message: Message):
    await message.answer("–í—Å–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n/start - "
                         "—Å—Ç–∞—Ä—Ç –±–æ—Ç–∞\n/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
                         "/weather - –ø–æ–≥–æ–¥–∞")

@dp.message(Command("weather"))
async def cmd_weather(message: Message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("–ü–æ–∂–∞–π–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /weather!")
        return

@dp.message(Command("test"))
async def cd_test(message: types.Message):
    await message.answer(text="Hello <i>World</i>", parse_mode=ParseMode.HTML)

# –ö–æ–º–∞–Ω–¥–∞ 'mark' —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º MarkdownV2
@dp.message(Command("mark"))
async def cd_test2(message: types.Message):
    text = (
        "*–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç*\n"
        "_–ö—É—Ä—Å–∏–≤_\n"
        "~–ó–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π~\n"
        "`–ú–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç`\n"
        "```Python\nprint('Hello, world!')\n```\n"
        "[–°—Å—ã–ª–∫–∞](https://example.com)"
    )
    await message.answer(text, parse_mode=ParseMode.MARKDOWN_V2)



    city = args[1]
    try:
        req = requests.get(f'https://api.openweathermap.org/data/2.5/weather', params={'q': city, 'appid': API_KEY, 'units': 'metric', 'lang': 'ru'})

        req.raise_for_status()
        data = req.json()

        if 'main' in data:
            temp = data['main']['temp']
            feels = data['main']['feels_like']
            humidity = data['main']['humidity']
            wind = data['wind']['speed']

            await message.answer(
                f"üåç –ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ <b>{city}</b>:\n"
                f"üå§ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>{temp}¬∞C</b>\n"
                f"üå° –ü–æ –æ—â—É—â–µ–Ω–∏—è–º: <b>{feels}¬∞C</b>\n"
                f"üí¶ –í–ª–∞–∂–Ω–æ—Å—Ç—å: <b>{humidity}%</b>\n"
                f"üí® –í–µ—Ç–µ—Ä: <b>{wind} –º/—Å</b>"
            )
        else:
            await message.answer("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    except requests.exceptions.RequestException:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message()
async def echo_message(message: Message):
    await message.answer("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è, –Ω–∞–ø–∏—à–∏ /help")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
            
